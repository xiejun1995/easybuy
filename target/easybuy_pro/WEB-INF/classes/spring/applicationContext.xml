<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
	                http://www.springframework.org/schema/beans
	                http://www.springframework.org/schema/beans/spring-beans.xsd
	                http://www.springframework.org/schema/aop
	                http://www.springframework.org/schema/aop/spring-aop.xsd
	                http://www.springframework.org/schema/tx
	                http://www.springframework.org/schema/tx/spring-tx.xsd
	                http://www.springframework.org/schema/context
	                http://www.springframework.org/schema/context/spring-context.xsd">
    <!--读取db.properties -->
    <context:property-placeholder location="classpath:jdbc/jdbc.properties"/>

    <!--ctrl+shift+h 用于查找类的所在层次结构  -->
    <!-- 配置数据源 -->
    <!-- 阿里巴巴中的druid获取数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${user}"/>
        <property name="password" value="${password}"/>
        <property name="initialSize" value="${initialSize}"/>
        <property name="minIdle" value="${minIdle}"/>
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
        <property name= "testWhileIdle" value="true"/>
        <property name= "timeBetweenEvictionRunsMillis" value="60000"/>
        <property name= "testOnBorrow" value="false"/>
        <property name= "testOnReturn" value="false"/>
        <property name= "validationQuery" value="select 1"/>
    </bean>

    <!-- 事务管理器，依赖于数据源 -->
    <bean id="transactionManager" class=
            "org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--数据库连接池-->
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!--开启事务注解 -->
    <tx:annotation-driven/>
    <!--配置MyBatis工厂 -->
    <!--MyBatis工厂构建的SqlSesstionFactory的作用：通常在配置时，需要提供两个参数，
        一个是数据源，一个是MyBatis的配置文件的构建路径，这样在配置时，Spring的Ioc容器就会在初始化id为sqlSessionFactory
            的bean时解析MyBatis的配置文件时就会与数据源一同保存在Spring的bean中-->

    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据源 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 扫描pojo包 -->
        <property name="typeAliasesPackage" value="cn.kgc.easybuy.pojo"/>
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:cn/kgc/easybuy/mapper/*.xml"/>
    </bean>

    <!-- Mapper动态代理开发，扫描dao接口包-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描mapper接口包 -->
        <property name="basePackage" value="cn.kgc.easybuy.mapper"/>
    </bean>
    <!-- <tx:annotation-driven transaction-manager="transactionManager"  proxy-target-class="true"/> -->
    <!-- 定义切面 -->
    <!--支持自动代理  -->
    <aop:aspectj-autoproxy/>
    <!-- proxy-target-class为true表示使用CLGB进行动态代理否则表示使用jdk动态代理 -->
    <aop:config proxy-target-class="true">
        <!-- 定义切入点 -->
        <aop:pointcut expression="execution(* *cn.kgc.easybuy.service..*(..))" id="transService"/>
        <!-- 定义通知器< aop:aspect>：定义切面（切面包括通知和切点）主要用于日志、缓存等
              < aop:advisor>：定义通知器（通知器跟切面一样，也包括通知和切点）主要用于事务管理 -->
        <aop:advisor advice-ref="myAdvice" pointcut-ref="transService"/>
    </aop:config>

    <tx:advice id="myAdvice">
        <tx:attributes>
            <tx:method name="*easybuy" rollback-for="Exception"  />
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>
</beans>
